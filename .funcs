#    ______                 __  _
#   / ____/_  ______  _____/ /_(_)___  ____  _____
#  / /_  / / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
# / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  )
#/_/    \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/

# ------------------ TMUX + TMATE = <3 ------------------
readonly TMATE_PAIR_NAME="$(whoami)-pair"
readonly TMATE_SOCKET_LOCATION="/tmp/tmate-pair.sock"
readonly TMATE_TMUX_SESSION="/tmp/tmate-tmux-session"

tmate-url() {
    local url=""
    while [ -z "$url" ]; do
        url="$(tmate -S $TMATE_SOCKET_LOCATION display -p '#{tmate_ssh}')"
    done
    echo "$url" | tr -d '\n' | pbcopy
    echo "Copied tmate url for $TMATE_PAIR_NAME:"
    echo "$url"
}

# Start a tmate session by attaching to an existing tmux session
mate() {
    if [ ! -e "$TMATE_SOCKET_LOCATION" ]; then
      tmate -S "$TMATE_SOCKET_LOCATION" \
          -f "$HOME/.tmate.conf" new-session \
          -d -s "$TMATE_PAIR_NAME"

      tmate-url

      if [ -n "$1" ]; then
        echo $1 > $TMATE_TMUX_SESSION
        tmate -S "$TMATE_SOCKET_LOCATION" send \
            -t "$TMATE_PAIR_NAME" \
            "TMUX='' tmux attach-session -t $1" ENTER
      fi
    fi
    tmate -S "$TMATE_SOCKET_LOCATION" attach-session \
        -t "$TMATE_PAIR_NAME"
}

# Close the tmate session
f-off() {
    if [ -e "$TMATE_SOCKET_LOCATION" ]; then
      rm -f $TMATE_TMUX_SESSION
      tmate -S "$TMATE_SOCKET_LOCATION" kill-session -t "$TMATE_PAIR_NAME"

      echo "Killed session $TMATE_PAIR_NAME"
    else
      echo "Session already killed"
    fi
}

# ------------------ Kubernetes ------------------
# set namespace
change-kube-namespace() {
    local ns="$1"
    if [[ -z "$ns" ]];then
        #TODO: print current namespace
    fi
    local ctx=$(kubectl config current-context)

    ns=$(kubectl get namespace $1 --no-headers --output=go-template={{.metadata.name}} 2>/dev/null)

    if [ -z "${ns}" ]; then
        echo "Namespace (${1}) not found!"
        return 1
    fi

    kubectl config set-context ${ctx} --namespace="${ns}"
}

# replace pod
kreplace() {
    kubectl get pod "$1" -o yaml -n alfheim | kubectl replace --force -f -
}

# attach to a pod
kube-exec() {
    kubectl exec -it $1 /bin/bash
}

# ------------------ CF ------------------
# create a cf org with a dev space inside
cf-org() {
    local org="$1"
    cf create-org $org
    cf target -o $org
    cf create-space dev
    cf target -s dev
}

# ------------------ General ------------------
search-and-replace() {
    local keyword=${1?Keyword not present}
    local replacement=${2?Replacement not present}

    rg -l $keyword -t go -g '!vendor/' | xargs -L 1 -o vim -c "%s/$keyword\C/$replacement/gc"
}

