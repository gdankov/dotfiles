#    ______                 __  _
#   / ____/_  ______  _____/ /_(_)___  ____  _____
#  / /_  / / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
# / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  )
#/_/    \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/

# ------------------ TMUX + TMATE = <3 ------------------
readonly TMATE_PAIR_NAME="$(whoami)-pair"
readonly TMATE_SOCKET_LOCATION="/tmp/tmate-pair.sock"
readonly TMATE_TMUX_SESSION="/tmp/tmate-tmux-session"

tmate-url() {
    local url=""
    while [ -z "$url" ]; do
        url="$(tmate -S $TMATE_SOCKET_LOCATION display -p '#{tmate_ssh}')"
    done
    echo "$url" | tr -d '\n' | pbcopy
    echo "Copied tmate url for $TMATE_PAIR_NAME:"
    echo "$url"
}

# Start a tmate session by attaching to an existing tmux session
mate() {
    if [ ! -e "$TMATE_SOCKET_LOCATION" ]; then
      tmate -S "$TMATE_SOCKET_LOCATION" \
          -f "$HOME/.tmate.conf" new-session \
          -d -s "$TMATE_PAIR_NAME"

      tmate-url

      if [ -n "$1" ]; then
        echo $1 > $TMATE_TMUX_SESSION
        tmate -S "$TMATE_SOCKET_LOCATION" send \
            -t "$TMATE_PAIR_NAME" \
            "TMUX='' tmux attach-session -t $1" ENTER
      fi
    fi
    tmate -S "$TMATE_SOCKET_LOCATION" attach-session \
        -t "$TMATE_PAIR_NAME"
}

# Close the tmate session
f-off() {
    if [ -e "$TMATE_SOCKET_LOCATION" ]; then
      rm -f $TMATE_TMUX_SESSION
      tmate -S "$TMATE_SOCKET_LOCATION" kill-session -t "$TMATE_PAIR_NAME"

      echo "Killed session $TMATE_PAIR_NAME"
    else
      echo "Session already killed"
    fi
}

# ------------------ Kubernetes ------------------
# set namespace
change-kube-namespace() {
    local ns="$1"
    if [[ -z "$ns" ]];then
        #TODO: print current namespace
    fi
    local ctx=$(kubectl config current-context)

    ns=$(kubectl get namespace $1 --no-headers --output=go-template={{.metadata.name}} 2>/dev/null)

    if [ -z "${ns}" ]; then
        echo "Namespace (${1}) not found!"
        return 1
    fi

    kubectl config set-context ${ctx} --namespace="${ns}"
}

# replace pod
kreplace() {
    kubectl get pod "$1" -o yaml -n alfheim | kubectl replace --force -f -
}

# attach to a pod
kube-exec() {
    kubectl exec -it $1 /bin/bash
}

kube-nuke-pod() {
    kubectl delete pod --grace-period=0 --force "$1"
}

# ------------------ CF ------------------
cf-connect() {
    local api="$1"
    local pass="$2"
    cf api --skip-ssl-validation https://api."$api".nip.io
    cf auth admin "$pass"

    cf-org o
}


# create a cf org with a dev space inside
cf-org() {
    local org="$1"
    cf create-org $org
    cf target -o $org
    cf create-space s
    cf target -s s
}

# ------------------ General ------------------
search-and-replace() {
    local keyword=${1?Keyword not present}
    local replacement=${2?Replacement not present}

    rg -l $keyword -t go -g '!vendor/' | xargs -L 1 -o vim -c "%s/$keyword\C/$replacement/gc"
}

weather() {
    curl -s http://wttr.in/
}

extract(){
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}


# ------------------ IBM Cloud ------------------

kluster-sync() {
    local cluster_name="$1"
    local kubeconf=$(ibmcloud ks cluster-config "$cluster_name" --export)
    eval "$kubeconf"
}

kluster() {
    local cluster_name="$1"
    if [ -z "$cluster_name" ];then
        bx ks clusters
        return 0
    fi
    local kubeconf=$(ls $HOME/.bluemix/plugins/container-service/clusters/"$cluster_name"/*.yml)
    export KUBECONFIG="$kubeconf"
}


kluster-nodes() {
    bx ks workers --cluster "$1"
}



# ------------------ Git ------------------

gpull-pr(){
    local ID="$1"
    local BRANCHNAME=pr-"$ID"

    git fetch origin pull/"$ID"/head:"$BRANCHNAME"
    git checkout "$BRANCHNAME"
}


